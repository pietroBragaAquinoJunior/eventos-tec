// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: protos/zrpc.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ZrpcService_ListEvents_FullMethodName   = "/zrpc.ZrpcService/ListEvents"
	ZrpcService_CreateEvent_FullMethodName  = "/zrpc.ZrpcService/CreateEvent"
	ZrpcService_CreateCoupon_FullMethodName = "/zrpc.ZrpcService/CreateCoupon"
)

// ZrpcServiceClient is the client API for ZrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZrpcServiceClient interface {
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	// rpc EventDetails(EventDetailsRequest) returns (EventDetailsResponse);
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error)
	CreateCoupon(ctx context.Context, in *CreateCouponRequest, opts ...grpc.CallOption) (*CreateCouponResponse, error)
}

type zrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZrpcServiceClient(cc grpc.ClientConnInterface) ZrpcServiceClient {
	return &zrpcServiceClient{cc}
}

func (c *zrpcServiceClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, ZrpcService_ListEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zrpcServiceClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	out := new(CreateEventResponse)
	err := c.cc.Invoke(ctx, ZrpcService_CreateEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zrpcServiceClient) CreateCoupon(ctx context.Context, in *CreateCouponRequest, opts ...grpc.CallOption) (*CreateCouponResponse, error) {
	out := new(CreateCouponResponse)
	err := c.cc.Invoke(ctx, ZrpcService_CreateCoupon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZrpcServiceServer is the server API for ZrpcService service.
// All implementations must embed UnimplementedZrpcServiceServer
// for forward compatibility
type ZrpcServiceServer interface {
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	// rpc EventDetails(EventDetailsRequest) returns (EventDetailsResponse);
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error)
	CreateCoupon(context.Context, *CreateCouponRequest) (*CreateCouponResponse, error)
	mustEmbedUnimplementedZrpcServiceServer()
}

// UnimplementedZrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedZrpcServiceServer struct {
}

func (UnimplementedZrpcServiceServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedZrpcServiceServer) CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedZrpcServiceServer) CreateCoupon(context.Context, *CreateCouponRequest) (*CreateCouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoupon not implemented")
}
func (UnimplementedZrpcServiceServer) mustEmbedUnimplementedZrpcServiceServer() {}

// UnsafeZrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZrpcServiceServer will
// result in compilation errors.
type UnsafeZrpcServiceServer interface {
	mustEmbedUnimplementedZrpcServiceServer()
}

func RegisterZrpcServiceServer(s grpc.ServiceRegistrar, srv ZrpcServiceServer) {
	s.RegisterService(&ZrpcService_ServiceDesc, srv)
}

func _ZrpcService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZrpcServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZrpcService_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZrpcServiceServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZrpcService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZrpcServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZrpcService_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZrpcServiceServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZrpcService_CreateCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZrpcServiceServer).CreateCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZrpcService_CreateCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZrpcServiceServer).CreateCoupon(ctx, req.(*CreateCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZrpcService_ServiceDesc is the grpc.ServiceDesc for ZrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zrpc.ZrpcService",
	HandlerType: (*ZrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEvents",
			Handler:    _ZrpcService_ListEvents_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _ZrpcService_CreateEvent_Handler,
		},
		{
			MethodName: "CreateCoupon",
			Handler:    _ZrpcService_CreateCoupon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/zrpc.proto",
}
