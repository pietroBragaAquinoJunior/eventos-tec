// Code generated by goctl. DO NOT EDIT.
// Source: zrpc.proto

package zrpcservice

import (
	"context"

	"eventos-tec/common/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateEventRequest              = __.CreateEventRequest
	CreateEventResponse             = __.CreateEventResponse
	Event                           = __.Event
	EventWithLocantionAndTypeString = __.EventWithLocantionAndTypeString
	ListEventsRequest               = __.ListEventsRequest
	ListEventsResponse              = __.ListEventsResponse

	ZrpcService interface {
		ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
		// rpc EventDetails(EventDetailsRequest) returns (EventDetailsResponse);
		CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error)
	}

	defaultZrpcService struct {
		cli zrpc.Client
	}
)

func NewZrpcService(cli zrpc.Client) ZrpcService {
	return &defaultZrpcService{
		cli: cli,
	}
}

func (m *defaultZrpcService) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	client := __.NewZrpcServiceClient(m.cli.Conn())
	return client.ListEvents(ctx, in, opts...)
}

// rpc EventDetails(EventDetailsRequest) returns (EventDetailsResponse);
func (m *defaultZrpcService) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	client := __.NewZrpcServiceClient(m.cli.Conn())
	return client.CreateEvent(ctx, in, opts...)
}
