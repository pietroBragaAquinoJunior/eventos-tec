// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	couponFieldNames          = builder.RawFieldNames(&Coupon{}, true)
	couponRows                = strings.Join(couponFieldNames, ",")
	couponRowsExpectAutoSet   = strings.Join(stringx.Remove(couponFieldNames), ",")
	couponRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(couponFieldNames, "id"))
)

type (
	couponModel interface {
		Insert(ctx context.Context, data *Coupon) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Coupon, error)
		Update(ctx context.Context, data *Coupon) error
		Delete(ctx context.Context, id string) error
	}

	defaultCouponModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Coupon struct {
		Id         string    `db:"id"`
		Discount   int64     `db:"discount"`
		Code       string    `db:"code"`
		ValidUntil time.Time `db:"valid_until"`
		EventId    string    `db:"event_id"`
	}
)

func newCouponModel(conn sqlx.SqlConn) *defaultCouponModel {
	return &defaultCouponModel{
		conn:  conn,
		table: `"public"."coupon"`,
	}
}

func (m *defaultCouponModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCouponModel) FindOne(ctx context.Context, id string) (*Coupon, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", couponRows, m.table)
	var resp Coupon
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCouponModel) Insert(ctx context.Context, data *Coupon) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5)", m.table, couponRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Discount, data.Code, data.ValidUntil, data.EventId)
	return ret, err
}

func (m *defaultCouponModel) Update(ctx context.Context, data *Coupon) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, couponRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Discount, data.Code, data.ValidUntil, data.EventId)
	return err
}

func (m *defaultCouponModel) tableName() string {
	return m.table
}
