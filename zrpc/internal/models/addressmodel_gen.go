// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	addressFieldNames          = builder.RawFieldNames(&Address{}, true)
	addressRows                = strings.Join(addressFieldNames, ",")
	addressRowsExpectAutoSet   = strings.Join(stringx.Remove(addressFieldNames), ",")
	addressRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(addressFieldNames, "id"))
)

type (
	addressModel interface {
		Insert(ctx context.Context, data *Address) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Address, error)
		Update(ctx context.Context, data *Address) error
		Delete(ctx context.Context, id string) error
	}

	defaultAddressModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Address struct {
		Id      string `db:"id"`
		Uf      string `db:"uf"`
		City    string `db:"city"`
		EventId string `db:"event_id"`
	}
)

func newAddressModel(conn sqlx.SqlConn) *defaultAddressModel {
	return &defaultAddressModel{
		conn:  conn,
		table: `"public"."address"`,
	}
}

func (m *defaultAddressModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAddressModel) FindOne(ctx context.Context, id string) (*Address, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", addressRows, m.table)
	var resp Address
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAddressModel) Insert(ctx context.Context, data *Address) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, addressRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Uf, data.City, data.EventId)
	return ret, err
}

func (m *defaultAddressModel) Update(ctx context.Context, data *Address) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, addressRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Uf, data.City, data.EventId)
	return err
}

func (m *defaultAddressModel) tableName() string {
	return m.table
}
